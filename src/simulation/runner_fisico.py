"""
M√≥dulo para ejecutar simulaciones Monte Carlo usando modelos f√≠sicos directos.
Optimizado con paralelizaci√≥n para m√∫ltiples n√∫cleos.
"""

import os
import sys
import numpy as np
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
import multiprocessing

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from config.settings import COST_PER_KWH
from src.weather.generator import generate_weather_profile, generate_hourly_temperature_profile
from src.physics.sala_servidores import SalaServidores


def crear_perfil_temperatura_exterior(duracion_horas=24):
    """
    Crea un perfil de temperatura exterior realista usando el generador clim√°tico.
    
    Args:
        duracion_horas: Duraci√≥n de la simulaci√≥n en horas
    
    Returns:
        Array con temperaturas exteriores cada 30 minutos
    """
    # Calcular n√∫mero de d√≠as completos
    num_dias = int(np.ceil(duracion_horas / 24))
    
    # Generar perfil clim√°tico para todos los d√≠as necesarios
    t_min_daily, t_max_daily, hour_min_daily, hour_max_daily = generate_weather_profile()
    
    # Si necesitamos m√°s d√≠as que los generados (31), generar d√≠as adicionales
    if num_dias > len(t_min_daily):
        dias_adicionales = num_dias - len(t_min_daily)
        t_min_extra, t_max_extra, hour_min_extra, hour_max_extra = generate_weather_profile()
        
        # Tomar solo los d√≠as adicionales que necesitamos
        t_min_daily = np.concatenate([t_min_daily, t_min_extra[:dias_adicionales]])
        t_max_daily = np.concatenate([t_max_daily, t_max_extra[:dias_adicionales]])
        hour_min_daily = np.concatenate([hour_min_daily, hour_min_extra[:dias_adicionales]])
        hour_max_daily = np.concatenate([hour_max_daily, hour_max_extra[:dias_adicionales]])
    
    # Generar perfil horario completo usando todos los d√≠as
    perfil_horario = generate_hourly_temperature_profile(
        t_min_daily[:num_dias], t_max_daily[:num_dias], 
        hour_min_daily[:num_dias], hour_max_daily[:num_dias]
    )
    
    # Interpolar a intervalos de 30 minutos
    perfil_30min = []
    for i in range(len(perfil_horario) - 1):
        T1, T2 = perfil_horario[i], perfil_horario[i + 1]
        perfil_30min.append(T1)
        perfil_30min.append((T1 + T2) / 2)  # Interpolaci√≥n lineal
    
    # Agregar el √∫ltimo punto
    perfil_30min.append(perfil_horario[-1])
    
    # Truncar al n√∫mero exacto de puntos necesarios
    puntos_necesarios = int(duracion_horas * 2)  # 2 puntos por hora (cada 30 min)
    return np.array(perfil_30min[:puntos_necesarios])


def ejecutar_simulacion_fisica(run_id, duracion_horas=24):
    """
    Ejecuta una simulaci√≥n completa usando el modelo f√≠sico.
    Optimizada para ejecuci√≥n en paralelo (thread-safe).
    
    Args:
        run_id: Identificador de la simulaci√≥n
        duracion_horas: Duraci√≥n en horas
    
    Returns:
        tuple: (costo_total, temperaturas_servidor) o (None, None) si falla
    """
    try:
        # No imprimir cada simulaci√≥n individual para evitar mezclar output en paralelo
        start_time = time.time()
        
        # Crear modelo de sala de servidores (cada hilo tiene su propia instancia)
        sala = SalaServidores()
        
        # Generar perfil de temperatura exterior (usa random, que es thread-safe en Python)
        T_exterior = crear_perfil_temperatura_exterior(duracion_horas)
        
        # Ejecutar simulaci√≥n
        tiempo_simulacion = duracion_horas * 3600  # Convertir a segundos
        resultados = sala.simular(tiempo_simulacion, T_exterior, dt=1800)  # dt = 30 min
        
        if resultados['success']:
            # Calcular costo
            energia_kWh = resultados['energia_total_kWh']
            costo_total = sala.calcular_costo_energetico(energia_kWh, COST_PER_KWH)
            
            # Extraer temperaturas del servidor (remuestreadas a intervalos horarios)
            temps_servidor = resultados['T_servidor']
            indices_horarios = np.arange(0, len(temps_servidor), 2)  # Cada 2 puntos = 1 hora
            temps_horarias = temps_servidor[indices_horarios]
            
            # Para el gr√°fico detallado, tambi√©n extraer otros datos horarios
            potencias_refrig = resultados['P_refrigeracion']
            potencias_horarias = potencias_refrig[indices_horarios]
            
            # COP real (si est√° disponible)
            cop_real = resultados.get('COP_real', None)
            cop_horarios = cop_real[indices_horarios] if cop_real is not None else None
            
            # Temperatura exterior tambi√©n remuestreada a horarios
            temp_ext_horarias = T_exterior[::1]  # T_exterior ya est√° en intervalos horarios
            
            elapsed_time = time.time() - start_time
            objetivo_cumplido = '‚úÖ' if resultados['objetivo_cumplido'] else '‚ùå'
            
            # Retornar datos completos para an√°lisis detallado
            datos_completos = {
                'T_servidor': temps_horarias,
                'T_exterior': temp_ext_horarias[:len(temps_horarias)],  # Ajustar longitud
                'P_refrigeracion': potencias_horarias,
                'COP_real': cop_horarios,
                'tiempo_horas': np.arange(len(temps_horarias)),
                'equipo_info': resultados.get('equipo_info', {})
            }
            
            return costo_total, temps_horarias, datos_completos
        else:
            return None, None, None
            
    except Exception as e:
        # En paralelo, retornar None en lugar de imprimir errores que se mezclan
        return None, None, None


def run_monte_carlo_adaptive(num_simulations, duracion_horas=24, max_workers=None):
    """
    Ejecuta simulaciones Monte Carlo usando modelos f√≠sicos con paralelizaci√≥n.
    
    Args:
        num_simulations: N√∫mero de simulaciones
        duracion_horas: Duraci√≥n de cada simulaci√≥n en horas
        max_workers: N√∫mero m√°ximo de hilos (None = auto-detectar n√∫cleos)
    
    Returns:
        tuple: (array_costos, lista_perfiles_temperatura)
    """
    
    # Auto-detectar n√∫mero de n√∫cleos si no se especifica
    if max_workers is None:
        max_workers = get_optimal_workers(num_simulations)
    
    print(f"\nüéØ Iniciando {num_simulations} simulaciones Monte Carlo con modelo f√≠sico...")
    print(f"‚è±Ô∏è  Duraci√≥n por simulaci√≥n: {duracion_horas} horas")
    print(f"üî¨ Usando modelos f√≠sicos directos (sin OpenModelica)")
    print(f"üöÄ Paralelizaci√≥n: {max_workers} hilos en {multiprocessing.cpu_count()} n√∫cleos disponibles")
    
    costs = []
    temperature_profiles = []
    detailed_data = []  # Para almacenar datos detallados de algunas simulaciones
    successful_runs = 0
    start_time = time.time()
    
    # Funci√≥n auxiliar para ejecutar una simulaci√≥n individual
    def run_single_simulation(run_id):
        return ejecutar_simulacion_fisica(run_id, duracion_horas)
    
    # Ejecutar simulaciones en paralelo
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        # Enviar todas las simulaciones al pool de hilos
        future_to_run_id = {
            executor.submit(run_single_simulation, i+1): i+1 
            for i in range(num_simulations)
        }
        
        completed_count = 0
        
        # Procesar resultados conforme van complet√°ndose
        for future in as_completed(future_to_run_id):
            run_id = future_to_run_id[future]
            completed_count += 1
            
            try:
                cost, temps, datos_detalle = future.result()
                
                if cost is not None:
                    costs.append(cost)
                    if temps is not None:
                        temperature_profiles.append(temps)
                    # Guardar datos detallados solo de las primeras simulaciones para el gr√°fico
                    if len(detailed_data) < 3 and datos_detalle is not None:
                        detailed_data.append(datos_detalle)
                    successful_runs += 1
                    
                    # Mostrar progreso
                    elapsed = time.time() - start_time
                    avg_time = elapsed / completed_count
                    eta = avg_time * (num_simulations - completed_count)
                    
                    print(f"‚úÖ Simulaci√≥n {run_id} completada ({completed_count}/{num_simulations}) - "
                          f"${cost:.3f} - ETA: {eta/60:.1f}min")
                else:
                    print(f"‚ùå Simulaci√≥n {run_id} fall√≥")
                
                # Mostrar progreso cada 10 simulaciones o al final
                if completed_count % 10 == 0 or completed_count == num_simulations:
                    progress_pct = (completed_count / num_simulations) * 100
                    print(f"üìà Progreso: {progress_pct:.1f}% ({successful_runs}/{completed_count} exitosas)")
                    
            except Exception as e:
                print(f"‚ùå Error inesperado en simulaci√≥n {run_id}: {e}")
    
    total_time = time.time() - start_time
    speedup = num_simulations / total_time if total_time > 0 else 0
    
    print(f"\nüéâ Completadas {successful_runs}/{num_simulations} simulaciones exitosas")
    print(f"‚è±Ô∏è  Tiempo total: {total_time:.1f}s ({speedup:.1f} sim/s)")
    print(f"üöÄ Aceleraci√≥n promedio: {speedup/max_workers:.1f}x por n√∫cleo")
    
    if successful_runs == 0:
        raise RuntimeError("‚ùå No se complet√≥ ninguna simulaci√≥n exitosamente")
    
    return np.array(costs), temperature_profiles, detailed_data


def escalar_a_mensual(costo_diario, dias=31):
    """Escala un costo diario a mensual."""
    return costo_diario * dias


def get_optimal_workers(num_simulations):
    """
    Determina el n√∫mero √≥ptimo de hilos para las simulaciones.
    
    Args:
        num_simulations: N√∫mero total de simulaciones
        
    Returns:
        int: N√∫mero √≥ptimo de hilos
    """
    cpu_count = multiprocessing.cpu_count()
    
    # Para pocas simulaciones, no usar todos los n√∫cleos
    if num_simulations <= 4:
        return min(num_simulations, 2)
    
    # Para simulaciones medianas, usar la mayor√≠a de n√∫cleos
    elif num_simulations <= 20:
        return min(cpu_count - 1, num_simulations)
    
    # Para muchas simulaciones, usar todos los n√∫cleos disponibles
    else:
        return min(cpu_count, num_simulations)


if __name__ == "__main__":
    # Prueba r√°pida del sistema
    print("üß™ Ejecutando prueba del sistema f√≠sico...")
    
    # Probar una simulaci√≥n
    cost, temps, datos_detalle = ejecutar_simulacion_fisica(999, duracion_horas=24)
    
    if cost is not None:
        costo_mensual = escalar_a_mensual(cost)
        print(f"‚úÖ Prueba exitosa:")
        print(f"   üí∞ Costo diario: ${cost:.3f}")
        print(f"   üí∞ Costo mensual estimado: ${costo_mensual:.2f}")
        if temps is not None:
            print(f"   üå°Ô∏è  Temperaturas: {len(temps)} puntos, rango {np.min(temps):.1f}-{np.max(temps):.1f}¬∞C")
    else:
        print("‚ùå Prueba fall√≥")
    
    # Probar Monte Carlo peque√±o con paralelizaci√≥n
    print(f"\nüß™ Probando Monte Carlo con 3 simulaciones (paralelo)...")
    try:
        costos, temps_profiles, datos_detallados = run_monte_carlo_adaptive(3, duracion_horas=24, max_workers=2)
        costos_mensuales = [escalar_a_mensual(c) for c in costos]
        print(f"‚úÖ Monte Carlo paralelo exitoso:")
        print(f"   üí∞ Costos mensuales: ${np.min(costos_mensuales):.2f} - ${np.max(costos_mensuales):.2f}")
        print(f"   üí∞ Promedio: ${np.mean(costos_mensuales):.2f}")
    except Exception as e:
        print(f"‚ùå Error en Monte Carlo paralelo: {e}")
