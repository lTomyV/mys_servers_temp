"""
Simulador principal de an√°lisis de servidores con control adaptativo inteligente.
Actualizado para usar modelos f√≠sicos directos (sin OpenModelica).
"""

import sys
import os
import numpy as np

# Agregar el directorio ra√≠z al path para importaciones
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config.settings import NUM_SIMULATIONS, SIMULATION_DAYS, MAX_WORKERS, ENABLE_PARALLEL, MODELO_HVAC
from config.equipos_hvac import MODELOS_REFRIGERACION
from src.simulation.runner_fisico import run_monte_carlo_adaptive, escalar_a_mensual
from src.analysis.statistics import calculate_cost_statistics, calculate_temperature_statistics
from src.visualization.plots import plot_cost_distribution, plot_temperature_density, plot_adaptive_performance, plot_system_performance_timeline
from src.physics.sala_servidores import SalaServidores


def print_adaptive_results(costs):
    """Imprime los resultados de la estrategia adaptativa."""
    stats = calculate_cost_statistics(costs)
    
    print(f"\n--- Resultados del Control Adaptativo Inteligente ---")
    print(f"Costo Mensual Promedio: ${stats['mean']:.2f}")
    print(f"Desviaci√≥n Est√°ndar del Costo: ${stats['std']:.2f}")
    print(f"Costo Mediano: ${stats['median']:.2f}")
    print(f"Costo90 (Percentil 90): ${stats['costo90']:.2f}")
    print(f"Rango de Costos: ${stats['min']:.2f} - ${stats['max']:.2f}")
    print(f"Coeficiente de Variaci√≥n: {stats['std']/stats['mean']*100:.1f}%")
    
    return stats


def print_temperature_analysis(temp_stats):
    """Imprime an√°lisis detallado de temperaturas."""
    if temp_stats is None:
        print("‚ö†Ô∏è  No hay datos de temperatura para analizar")
        return
    
    print("\n--- An√°lisis de Temperaturas ---")
    print(f"Temperatura interior m√≠nima registrada: {temp_stats['temp_min']:.1f}¬∞C")
    print(f"Temperatura interior m√°xima registrada: {temp_stats['temp_max']:.1f}¬∞C")
    print(f"Temperatura promedio: {np.mean(temp_stats['hourly_means']):.1f}¬∞C")
    
    # An√°lisis de cumplimiento del objetivo
    temps_over_25 = np.sum(temp_stats['hourly_means'] > 25.0)
    total_hours = len(temp_stats['hourly_means'])
    porcentaje_cumplimiento = (total_hours - temps_over_25) / total_hours * 100
    
    print(f"\n--- An√°lisis de Cumplimiento ---")
    print(f"Horas con temperatura > 25¬∞C: {temps_over_25}/{total_hours}")
    print(f"Cumplimiento del objetivo: {porcentaje_cumplimiento:.1f}%")
    
    if porcentaje_cumplimiento >= 95:
        print("‚úÖ EXCELENTE: Cumplimiento √≥ptimo del objetivo de temperatura")
    elif porcentaje_cumplimiento >= 90:
        print("‚úÖ BUENO: Cumplimiento satisfactorio del objetivo")
    elif porcentaje_cumplimiento >= 80:
        print("‚ö†Ô∏è  REGULAR: Necesita mejoras en el control")
    else:
        print("‚ùå DEFICIENTE: Control inadecuado")
    
    # An√°lisis de eficiencia energ√©tica
    temps_under_20 = np.sum(temp_stats['hourly_means'] < 20.0)
    if temps_under_20 > 0:
        print(f"‚ö° Posible sobre-enfriamiento: {temps_under_20} horas < 20¬∞C")
    else:
        print("‚ö° Sin sobre-enfriamiento detectado")


def print_efficiency_analysis(cost_stats):
    """Imprime an√°lisis de eficiencia energ√©tica."""
    print("\n--- An√°lisis de Eficiencia Energ√©tica ---")
    
    # Calcular m√©tricas de eficiencia
    costo_diario_promedio = cost_stats['mean'] / 31  # 31 d√≠as
    costo_por_hora = costo_diario_promedio / 24
    
    print(f"Costo diario promedio: ${costo_diario_promedio:.2f}")
    print(f"Costo por hora promedio: ${costo_por_hora:.3f}")
    
    # An√°lisis de variabilidad
    cv = cost_stats['std'] / cost_stats['mean'] * 100
    if cv < 10:
        print(f"‚úÖ Variabilidad baja (CV={cv:.1f}%): Control muy estable")
    elif cv < 20:
        print(f"‚úÖ Variabilidad moderada (CV={cv:.1f}%): Control estable")
    else:
        print(f"‚ö†Ô∏è  Variabilidad alta (CV={cv:.1f}%): Control menos predecible")


def main():
    """Funci√≥n principal del simulador adaptativo."""
    print("="*70)
    print("üè¢ SIMULADOR DE CONTROL ADAPTATIVO INTELIGENTE PARA SERVIDORES")
    print("="*70)
    
    print(f"\nüéØ Configuraci√≥n del experimento:")
    print(f"  ‚Ä¢ Simulaciones Monte Carlo: {NUM_SIMULATIONS}")
    print(f"  ‚Ä¢ Duraci√≥n por simulaci√≥n: {SIMULATION_DAYS} d√≠as")
    print(f"  ‚Ä¢ Modelo: F√≠sico directo (Python)")
    print(f"  ‚Ä¢ Paralelizaci√≥n: {'‚úÖ Habilitada' if ENABLE_PARALLEL else '‚ùå Deshabilitada'}")
    if ENABLE_PARALLEL:
        import multiprocessing
        from src.simulation.runner_fisico import get_optimal_workers
        workers = MAX_WORKERS if MAX_WORKERS else get_optimal_workers(NUM_SIMULATIONS)
        print(f"  ‚Ä¢ Hilos: {workers} (de {multiprocessing.cpu_count()} n√∫cleos)")
    print(f"  ‚Ä¢ Estrategia: Control sigmoidal adaptativo")
    print(f"  ‚Ä¢ Rango de control: 15¬∞C (0%) ‚Üí 25¬∞C (100%)")
    
    # Informaci√≥n del equipo HVAC
    equipo_info = MODELOS_REFRIGERACION[MODELO_HVAC]
    print(f"\n‚ùÑÔ∏è  Equipo de Refrigeraci√≥n:")
    print(f"  ‚Ä¢ Modelo: {equipo_info['nombre']}")
    print(f"  ‚Ä¢ Potencia nominal: {equipo_info['potencia_nominal']/1000:.0f} kW")
    print(f"  ‚Ä¢ COP nominal: {equipo_info['cop_nominal']} @35¬∞C")
    print(f"  ‚Ä¢ COP variable: S√≠ (funci√≥n de T_exterior)")

    # Generar y mostrar curva de control
    print(f"\nüìä Generando curva de control adaptativo...")
    try:
        os.makedirs('graphs', exist_ok=True)
        sala_demo = SalaServidores()
        sala_demo.generar_curva_control()
        print("‚úÖ Curva de control generada: graphs/curva_control_fisica.png")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error generando curva: {e}")
    
    # Ejecutar simulaciones Monte Carlo
    print(f"\nüöÄ Iniciando simulaciones Monte Carlo...")
    print("="*50)
    
    try:
        # Ejecutar simulaciones con modelo f√≠sico (costos diarios)
        if ENABLE_PARALLEL:
            costos_diarios, temp_profiles, datos_detallados = run_monte_carlo_adaptive(
                NUM_SIMULATIONS, 
                duracion_horas=SIMULATION_DAYS*24,
                max_workers=MAX_WORKERS
            )
        else:
            # Versi√≥n secuencial para debugging o sistemas con problemas de paralelizaci√≥n
            costos_diarios, temp_profiles, datos_detallados = run_monte_carlo_adaptive(
                NUM_SIMULATIONS, 
                duracion_horas=SIMULATION_DAYS*24,
                max_workers=1
            )
        
        # Escalar costos diarios a mensuales para an√°lisis
        costs = [escalar_a_mensual(costo_diario, SIMULATION_DAYS) for costo_diario in costos_diarios]
        
        if len(costs) == 0:
            print("‚ùå No se obtuvieron resultados v√°lidos")
            return 1
        
        # Analizar resultados de costos
        print("\n" + "="*50)
        cost_stats = print_adaptive_results(costs)
        
        # Generar histograma de costos
        plot_cost_distribution(costs, "Control Adaptativo F√≠sico")
        
        # Analizar temperaturas si est√°n disponibles
        if temp_profiles:
            print("\n" + "="*50)
            print("--- An√°lisis de Temperaturas ---")
            temp_stats = calculate_temperature_statistics(temp_profiles)
            print_temperature_analysis(temp_stats)
            
            # Generar gr√°ficos de temperatura
            plot_temperature_density(temp_stats)
            
            # Generar an√°lisis de rendimiento adaptativo
            plot_adaptive_performance(temp_profiles, costs)
        
        # Generar gr√°fico temporal del sistema (temperatura exterior, servidor, potencia)
        if datos_detallados:
            print("\n--- Generando Gr√°fico Temporal del Sistema ---")
            plot_system_performance_timeline(datos_detallados)
        
        # An√°lisis de eficiencia
        print_efficiency_analysis(cost_stats)
        
        # Resumen final
        print("\n" + "="*70)
        print("üéâ AN√ÅLISIS COMPLETADO")
        print("="*70)
        print("üìÅ Archivos generados en la carpeta 'graphs/':")
        print("  ‚Ä¢ histograma_costos_Control Adaptativo F√≠sico.png")
        print("  ‚Ä¢ curva_control_fisica.png")
        if temp_profiles:
            print("  ‚Ä¢ distribucion_temperaturas_horarias.png")
            print("  ‚Ä¢ rendimiento_adaptativo.png")
        if datos_detallados:
            print("  ‚Ä¢ rendimiento_sistema_temporal.png")
        
        print(f"\nüèÜ RESULTADO FINAL:")
        print(f"  ‚Ä¢ Costo promedio mensual: ${cost_stats['mean']:.2f}")
        print(f"  ‚Ä¢ Control de temperatura: {'‚úÖ √ìPTIMO' if temp_profiles else '‚ö†Ô∏è  NO EVALUADO'}")
        print(f"  ‚Ä¢ Eficiencia energ√©tica: {'‚úÖ ALTA' if cost_stats['std']/cost_stats['mean'] < 0.2 else '‚ö†Ô∏è  MODERADA'}")
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå Error durante la ejecuci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit(main())
